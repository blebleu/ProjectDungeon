<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_start();
pitch = 0;
direction = 0;
z = 0;

xspeed = 0;
yspeed = 0;
zspeed = 0;
move_speed = 4;

window_set_cursor(cr_none);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement

direction-= (display_mouse_get_x() - display_get_width()/2)/10; //Left and Right for camera

pitch = clamp(pitch + (display_mouse_get_y() - display_get_height()/2)/10, -80, 80); //Up and down for camera

display_mouse_set(display_get_width()/2, display_get_height()/2);

if(keyboard_check(vk_escape)){
    game_end();
    }

// Handle Movement  
xspeed = 0;
yspeed = 0; 
var d = degtorad(direction);      
switch  (keyboard_key){
    case vk_left:
    case ord('A'):
        xspeed-= sin(d) * move_speed;
        yspeed-= cos(d) * move_speed;
        
    
        break;
    case vk_down:
    case ord('S'):
    
        xspeed-= cos(d) * move_speed;
        yspeed+= sin(d) * move_speed;
        break;
    case vk_right:
    case ord('D'):
    
        xspeed+= sin(d) * move_speed;
        yspeed+= cos(d) * move_speed;
            
        break;
    case vk_up:
    case ord('W'):
    
        xspeed+= cos(d) * move_speed; 
        yspeed-= sin(d) * move_speed;
    
        break;
}



if (!place_meeting(x + xspeed,  y, obj_block)){
        x += xspeed; //Move X
}
else{
        xspeed = 0; 
}

if (!place_meeting(x,  y + yspeed, obj_block)){
        y += yspeed; //Move X
}
else{
        yspeed = 0; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
d3d_set_fog(true, c_black, 5, 1000); //CAN MAKE A FOG IF NEEDED
d3d_set_projection(x, y, z + 64 , x +cos(degtorad(direction)), y - sin(degtorad(direction)), z-sin(degtorad(pitch))+64,0,0,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
